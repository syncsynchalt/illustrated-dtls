<div class="rec-outer">
<div class="calculation server">
<div class="rec-label">Server Handshake Keys Calc</div>
<!--suppress CheckImageSize -->
<img class="illustration" src="images/key5.png" width="124" height="250"/>
<div class="rec-explanation">
    The server now has the information needed to calculate the
    keys used to encrypt the rest of the handshake.  It uses the following
    information in this calculation:
    <ul>
    <li><a href="files/client-ephemeral-public.key">client public key</a> (from Client Hello)
    <li><a href="files/server-ephemeral-private.key">server private key</a> (from Server Key Exchange Generation)
    <li>SHA256 hash of ClientHello and ServerHello</li>
    </ul>
    <p>
    First, the server finds the shared secret, which is the
    result of the key exchange that allows the client and server
    to agree on a number.  The server multiplies the client's
    public key by the server's private key using the curve25519()
    algorithm.  The 32-byte result is found to be:
    <pre class="ind2"><tt class="longboi"
    >df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624</tt></pre>
    I've provided <a href="files/curve25519-mult.c" download="curve25519-mult.c">a tool</a>
    to perform this calculation:
    <codesample>
<pre><code>$ cc -o curve25519-mult curve25519-mult.c
$ ./curve25519-mult server-ephemeral-private.key \
                    client-ephemeral-public.key | hexdump

0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad
0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24
</code></pre>
    </codesample>

    It then calculates the SHA256 hash of all handshake messages
    to this point (ClientHello and ServerHello). The hash does
    not include DTLS-only bytes in the records, which are bytes 0-12 and 17-24. Ignoring these
    bytes allows implementations to share code between TLS and DTLS implementations. This "hello_hash"
    is <tt class="longboi"
    >aee8eba0d2ee87052fbbc6864c1514c5a927d6f0ffb4f7954c7f379d95f1b1d7</tt>:
    <codesample>
<pre><code>$ (cat captures/caps/record-chello | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/';
   cat captures/caps/record-shello | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/') \
   | openssl sha256

aee8eba0d2ee87052fbbc6864c1514c5a927d6f0ffb4f7954c7f379d95f1b1d7
</code></pre>
    </codesample>

    We then feed the hash and the shared secret into a set of
    key derivation operations, designed to protect against known and
    possible attacks:

    <processblock>
<pre>early_secret = HKDF-Extract(salt=00, key=00...)
empty_hash = SHA256("")
derived_secret = HKDF-Expand-Label(key: early_secret, label: "derived", ctx: empty_hash, len: 32)
handshake_secret = HKDF-Extract(salt: derived_secret, key: shared_secret)
client_secret = HKDF-Expand-Label(key: handshake_secret, label: "c hs traffic", ctx: hello_hash, len: 32)
server_secret = HKDF-Expand-Label(key: handshake_secret, label: "s hs traffic", ctx: hello_hash, len: 32)
client_key = HKDF-Expand-Label(key: client_secret, label: "key", ctx: "", len: 16)
server_key = HKDF-Expand-Label(key: server_secret, label: "key", ctx: "", len: 16)
client_iv = HKDF-Expand-Label(key: client_secret, label: "iv", ctx: "", len: 12)
server_iv = HKDF-Expand-Label(key: server_secret, label: "iv", ctx: "", len: 12)
client_sn_key = HKDF-Expand-Label(key: client_secret, label: "sn", ctx: "", len: 16)
server_sn_key = HKDF-Expand-Label(key: server_secret, label: "sn", ctx: "", len: 16)
</pre>
    </processblock>

    I've created <a href="files/hkdf.sh" download="hkdf">an HKDF tool</a>
    to perform these operations on the command line.
    The key derivation process is reproduced below:
    <codesample>
<pre><code>$ hello_hash=aee8eba0d2ee87052fbbc6864c1514c5a927d6f0ffb4f7954c7f379d95f1b1d7
$ shared_secret=df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624
$ zero_key=0000000000000000000000000000000000000000000000000000000000000000
$ early_secret=$(./hkdf-dtls extract 00 $zero_key)
$ empty_hash=$(openssl sha256 < /dev/null | sed -e 's/.* //')
$ derived_secret=$(./hkdf-dtls expandlabel $early_secret "derived" $empty_hash 32)
$ handshake_secret=$(./hkdf-dtls extract $derived_secret $shared_secret)
$ csecret=$(./hkdf-dtls expandlabel $handshake_secret "c hs traffic" $hello_hash 32)
$ ssecret=$(./hkdf-dtls expandlabel $handshake_secret "s hs traffic" $hello_hash 32)
$ client_handshake_key=$(./hkdf-dtls expandlabel $csecret "key" "" 16)
$ server_handshake_key=$(./hkdf-dtls expandlabel $ssecret "key" "" 16)
$ client_handshake_iv=$(./hkdf-dtls expandlabel $csecret "iv" "" 12)
$ server_handshake_iv=$(./hkdf-dtls expandlabel $ssecret "iv" "" 12)
$ client_sn_key=$(./hkdf-dtls expandlabel $csecret "sn" "" 16)
$ server_sn_key=$(./hkdf-dtls expandlabel $ssecret "sn" "" 16)
$ echo client_key: $client_handshake_key
$ echo client_iv: $client_handshake_iv
$ echo server_key: $server_handshake_key
$ echo server_iv: $server_handshake_iv
$ echo client_sn_key: $client_sn_key
$ echo server_sn_key: $server_sn_key

client_key: 6caa2633d5e48f10051e69dc45549c97
client_iv: 106dc6e393b7a9ea8ef29dd7
server_key: 004e03e64ab6cba6b542775ec230e20a
server_iv: 6d9924be044ee97c624913f2
client_sn_key: beed6218676635c2cb46a45694144fec
server_sn_key: 7173fac51194e775001d625ef69d7c9f
</code></pre>
    </codesample>

    From this we get the following encryption keys and IVs:
    <ul>
    <li>client handshake key: <tt class="longboi">6caa2633d5e48f10051e69dc45549c97</tt>
    <li>client handshake IV: <tt class="longboi">106dc6e393b7a9ea8ef29dd7</tt>
    <li>server handshake key: <tt class="longboi">004e03e64ab6cba6b542775ec230e20a</tt>
    <li>server handshake IV: <tt class="longboi">6d9924be044ee97c624913f2</tt>
    <li>client record number key: <tt class="longboi">beed6218676635c2cb46a45694144fec</tt>
    <li>server record number key: <tt class="longboi">7173fac51194e775001d625ef69d7c9f</tt>
    </ul>
</div>
</div>
</div>

<div class="rec-outer">
<div class="calculation client">
<div class="rec-label">Client Handshake Keys Calc</div>
<img class="illustration" src="images/key6.png" width="105" height="250"/>
<div class="rec-explanation">
    The client now has the information to calculate the
    keys that used to encrypt the rest of the handshake.  It uses the following
    information in this calculation:
    <ul>
    <li><a href="files/server-ephemeral-public.key">server public key</a> (from Server Hello)
    <li><a href="files/client-ephemeral-private.key">client private key</a> (from Client Key Exchange Generation)
    <li>SHA256 hash of ClientHello and ServerHello</li>
    </ul>
    First, the client finds the shared secret, which is the
    result of the key exchange that allows the client and server
    to agree on a number.  The client multiplies the server's
    public key by the client's private key using the curve25519()
    algorithm. The properties of elliptic curve multiplication will
    cause this to result in the same number found by the server in its
    multiplication. The 32-byte result is found to be:
    <pre class="ind2"><tt class="longboi"
    >df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624</tt></pre>

    I've provided <a href="files/curve25519-mult.c" download="curve25519-mult.c">a tool</a>
    to perform this calculation:
    <codesample>
<pre><code>$ cc -o curve25519-mult curve25519-mult.c
$ ./curve25519-mult client-ephemeral-private.key \
                    server-ephemeral-public.key | hexdump

0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad
0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24
</code></pre>
    </codesample>
    Since the shared secret above is the same number calculated by the
    server in "Server Handshake Keys Calc", the rest of
    the calculation is identical and the same values are found:
    <ul>
    <li>client handshake key: <tt class="longboi">6caa2633d5e48f10051e69dc45549c97</tt>
    <li>client handshake IV: <tt class="longboi">106dc6e393b7a9ea8ef29dd7</tt>
    <li>server handshake key: <tt class="longboi">004e03e64ab6cba6b542775ec230e20a</tt>
    <li>server handshake IV: <tt class="longboi">6d9924be044ee97c624913f2</tt>
    <li>client record number key: <tt class="longboi">beed6218676635c2cb46a45694144fec</tt>
    <li>server record number key: <tt class="longboi">7173fac51194e775001d625ef69d7c9f</tt>
    </ul>
</div>
</div>
</div>
