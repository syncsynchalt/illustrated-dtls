<div class="rec-outer">
<div class="record server">
<div class="rec-label">Server Cert Verify Datagram</div>
<!--suppress CheckImageSize -->
<img class="illustration" src="images/key5.png" width="124" height="250"/>
<div class="rec-explanation">
    The server provides information that ties the public key
    generated during Server Key Exchange Generation to the
    ownership of the certificate's private key.
</div>
%file ../captures/caps/05-cverify-shs-prot
<span class="record-data">
    <span class="string">
        <span class="label">Header Info Byte</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            <p>
            An encrypted DTLS packet starts with the "Unified Header". This first byte
            of the header gives information on the structure and decryption of
            the rest of the header and packet.
            <p>
            The bits in the value %x0 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Value</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><xtt>001</xtt></td><td>Fixed bits</td></tr>
            <tr><td></td><td><xtt>0</xtt></td><td>Connection ID field not present in header</td></tr>
            <tr><td></td><td><xtt>1</xtt></td><td>Sequence number in header is 2 bytes long</td></tr>
            <tr><td></td><td><xtt>1</xtt></td><td>Length field is present in header</td></tr>
            <tr><td>LSB</td><td><xtt>10</xtt></td><td>Encryption epoch 2 - handshake keys</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Number</span>
        <span class="bytes protected">
%next 2
%bytes
        </span>
        <span class="bytes unprotected">
00 02
        </span>
        <div class="explanation">
            <button class="hp-toggle"></button><br>
            The record number of the packet is encrypted, to prevent middleware
            from interpreting or interfering with the sequencing of packets.
            <br><br>
            This encryption is applied by encrypting a sample of each packet's
            payload with the "record number key", then XOR'ing certain bits
            and bytes in each packet with the resulting data.
            <br><br>
            An example of how to compute record number encryption:
            <codesample>
<pre><code>### "server record number key" from handshake keys calc step above
$ key=7173fac51194e775001d625ef69d7c9f
### sample is taken from 16 bytes of payload starting 5 bytes into the record
$ sample=83bedfea0f4aa578453af4f4a4be4106
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p

a43c

### the above bytes are xor'd one-for-one into the bytes of the record number
</code></pre>
            </codesample>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            Each record is assumed to consume the remainder of the datagram unless this
            optional length is given. This allows implementations to send several TLS records
            in a single datagram (though this connection does not take advantage of this).
            <ul>
            <li><xtt>%0 %1</xtt> - Record length of %nn0 bytes
            </ul>
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 273
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the server handshake key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that protects the integrity of the
            encrypted data and the record header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the server
            handshake key and the server handshake IV that were
            generated during the "Server Handshake Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 2.  The process also
            takes as input the 5-byte record header, as authenticated
            data that must match for the decryption to
            succeed.
            <br/><br/>
            Because the <xtt>openssl</xtt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Server Handshake Keys Calc" step
$ key=004e03e64ab6cba6b542775ec230e20a
$ iv=6d9924be044ee97c624913f2
### from this record
$ recdata=2e00020121
$ authtag=bdf0f6f0060db4711971387c2189394f
$ recordnum=2
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  0f 00 01 04 00 03 00 00  00 00 01 04 08 04 01 00  |................|
00000010  2c 76 3d 6a d3 d8 af 7f  a3 7d a6 d8 d9 0e 73 7c  |,v=j?د.?}???.s||
00000020  ea 53 ee 7a ff a5 61 48  74 cc 68 48 9c 73 a2 f3  |?S?z??aHt?hH.s??|
00000030  a0 43 cb ba e6 c2 7a 41  91 0e de 9a df c7 22 23  |?C˺??zA..?.??"#|
00000040  58 26 12 ec 96 79 fe 1f  9f a5 f4 a4 b6 12 f8 6f  |X&.?.y?..????.?o|
... snip ...
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/record-cverify
    <span class="string decrypted">
        <span class="label">Handshake Header</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            Each handshake message starts with a type and a length.
            <ul>
            <li><xtt>%0</xtt> - handshake message type 0x0f (certificate verify)
            <li><xtt>%1 %2 %3</xtt> - %nnn1 bytes of handshake message data within
            </ul>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Handshake Reconstruction Data</span>
        <span class="bytes">
%next 8
%bytes
        </span>
        <div class="explanation">
            Because UDP does not guarantee delivery or ordering, and
            because UDP datagrams might be smaller than handshake records that need
            to be sent, values must be provided to support record re-construction
            in case of data loss, reordering, or fragmentation.
            <ul>
            <li><xtt>%0 %1</xtt> - handshake message sequence number %nn0
            <li><xtt>%2 %3 %4</xtt> - fragment offset of %nnn2 bytes
            <li><xtt>%5 %6 %7</xtt> - fragment length of %nnn5 bytes
            </ul>
            <p>
            In this case the entire handshake record fits within a single UDP datagram,
            indicated by offset of zero and length of the full handshake record length.
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Signature</span>
        <span class="bytes">
%next 260
%bytes
        </span>
        <div class="explanation">
            Because the server is generating ephemeral
            keys for each session (optional in TLS 1.2,
            mandatory in TLS 1.3) the session is not
            inherently tied to the certificate as it
            was in previous versions of TLS, when the
            certificate's public/private key were used
            for key exchange.
            <br/><br/>
            To prove
            that the server owns the server certificate
            (giving the certificate validity in this
            TLS session), it signs a hash of the handshake
            messages using the private key associated with the certificate.
            The signature can be proven valid by
            the client by using the public key included in the certificate.
            <ul>
            <li><xtt>08 04</xtt> - reserved value for RSA-PSS-RSAE-SHA256 signature
            <li><xtt>%2 %3</xtt> - %nn2 bytes of signature data follows
            <li><xtt>%4 %5 %6 ... %-3 %-2 %-1</xtt> - a signature over this handshake's hash
            </ul>
            The signing process can't be reproduced byte-for-byte
            at the command line because the signing tool introduces
            random or changing data into the signature.
            <br/><br/>
            We can verify the signature using the
            <a href="files/server.crt" download="server.crt">server's certificate</a>
            at the command line:
            <codesample>
<pre><code>### find the hash of the conversation to this point, excluding
### cleartext record headers, DTLS-only record headers,
### or 1-byte decrypted record trailers
$ handshake_hash=$((
   cat record-chello | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/s';
   cat record-shello | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/s';
   cat record-encext | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';
   cat record-cert   | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';
   )| openssl sha256)

### build the data that was signed:
### 1. add 64 space characters
$ echo -n '                                ' > /tmp/tosign
$ echo -n '                                ' >> /tmp/tosign
### 2. add this fixed string
$ echo -n 'TLS 1.3, server CertificateVerify' >> /tmp/tosign
### 3. add a single null character
$ echo -en '\0' >> /tmp/tosign
### 4. add hash of handshake to this point
$ echo $handshake_hash | xxd -r -p >> /tmp/tosign

### copy the signature that we want to verify
$ echo "2c 76 3d 6a d3 d8 af 7f a3 7d a6 d8 d9 0e 73 7c ea 53 ee 7a
  ff a5 61 48 74 cc 68 48 9c 73 a2 f3 a0 43 cb ba e6 c2 7a 41 91 0e
  de 9a df c7 22 23 58 26 12 ec 96 79 fe 1f 9f a5 f4 a4 b6 12 f8 6f
  40 88 49 a3 29 f7 63 e0 4f be 95 9a 91 e8 d1 8d 4a ba 79 29 57 6f
  a0 24 ec b2 37 d6 33 78 e9 8e e5 9d c9 59 49 b2 63 b3 06 53 0a 2e
  6f b9 b2 2f a2 3c 64 32 33 43 03 89 33 01 fd 60 e2 05 82 6e b9 ec
  41 4f ec 5f 9a 0d 6f 8f 3d 89 a0 9f 14 8e 0f 05 03 49 bc 1e 17 97
  d9 28 1e ed f6 e7 66 9c e2 56 ae 79 d4 ee 8c 96 56 0d cf 07 6c 2a
  45 a4 ee e8 d2 79 71 0f 0c e7 03 4a 3f 5c aa 94 41 4e ae df 61 08
  48 66 e4 9e 81 88 3e e2 1a 12 59 3c cb 96 dd 11 76 9e 34 0f 1e 6c
  c2 14 b0 57 95 e5 4a fc 94 79 84 5e 4d f2 bf 96 9f bb 21 8c b9 c4
  b8 34 a8 51 be 34 75 a1 45 2f 4b 33 55 4f 9d 65" | xxd -r -p > /tmp/sig

### extract the public key from the certificate
$ openssl x509 -pubkey -noout -in server.crt > server.pub

### verify the signature
$ cat /tmp/tosign | openssl dgst -verify server.pub -sha256 \
    -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:-1 -signature /tmp/sig

Verified OK
</code></pre>
            </codesample>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Record Type</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            Each encrypted DTLS 1.3 record has a final byte which indicates its actual record type.
            <ul>
            <li><xtt>%0</xtt> - type is 22 (handshake record)
            </ul>
        </div>
    </span>
</span>
</div>
</div>
%empty
