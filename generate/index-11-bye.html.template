<div class="rec-outer">
<div class="record server">
<div class="rec-label">Server Alert</div>
<div class="rec-explanation">
    The server sends an "alert" to indicate an orderly shutdown.
</div>
%file ../captures/caps/11-bye-sap-prot
<span class="record-data">
    <span class="string">
        <span class="label">Unified Header Byte</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            An encrypted DTLS packet starts with the "Unified Header". This
            byte gives information on the structure and decryption epoch of
            the header and packet.
            <p>
            The bits in the value %x0 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Val</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><tt>001</tt></td><td>Fixed bits</td></tr>
            <tr><td></td><td><tt>0</tt></td><td>Connection ID is not present in header</td></tr>
            <tr><td></td><td><tt>1</tt></td><td>Sequence number in header is 2 bytes long</td></tr>
            <tr><td></td><td><tt>1</tt></td><td>2-byte length is present in header</td></tr>
            <tr><td>LSB</td><td><tt>11</tt></td><td>Encryption epoch 3 - first application keys</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Number</span>
        <span class="bytes protected">
%next 2
%bytes
        </span>
        <span class="bytes unprotected">
00 02
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable record number encryption</button><br>
            The record number of the packet is encrypted, to prevent middleware
            from interpreting or interfering with the sequencing of packets.
            <br><br>
            This encryption is applied by encrypting a sample of each packet's
            payload with the "record number key", then XOR'ing certain bits
            and bytes in each packet with the resulting data.
            <br><br>
            An example of how to compute record number encryption:
            <codesample>
<pre><code>### "server record number key" from application keys calc step above
$ key=57ba02596c6a1352d7fe8416c7e17d5a
### sample is taken from 16 bytes of payload starting 5 bytes into the record
$ sample=dd8cd07daa964fd1ab508825378fc96f
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p

690e

### the above bytes are xor'd one-for-one into the bytes of the record number
</code></pre>
            </codesample>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            Each record is assumed to consume the remainder of the datagram unless this
            optional length is given. This allows implementations to send several TLS records
            in a single datagram (though this connection does not take advantage of this).
            <ul>
            <li><xtt>%0 %1</xtt> - Record length of %nn0 bytes
            </ul>
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 3
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the server application key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that protects the integrity of the
            encrypted data and the record header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the server
            application key and the server application IV that were
            generated during the "Server Application Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 1.  The process also
            takes as input the 5-byte record header, as authenticated
            data that must match for the decryption to
            succeed.
            <br/><br/>
            Because the <tt>openssl</tt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Server Application Keys Calc" step
$ key=2b65fffbbc8189474aa2003c43c32d4d
$ iv=582f5a11bdaf973fe3ffeb4e
### from this record
$ recdata=2f00020013
$ authtag=7daa964fd1ab508825378fc96fa8b1e8
$ recordnum=2
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  01 00 15
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/record-sbye
    <span class="string decrypted">
        <span class="label">Alert</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            The server sends a "close notify" alert, indicating an orderly shutdown of the connection.
            <ul>
            <li><xtt>%0</xtt> - alert level 1 (warning) - unused
            <li><xtt>%1</xtt> - alert number 0 (close_notify)
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Record Type</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            Each TLS 1.3 record disguised as TLS 1.2
            application data has a final byte
            which indicates its actual record type.
            <ul>
            <li><tt>%0</tt> - type is 21 (alert)
            </ul>
        </div>
    </span>
</span>
</div>
</div>
%empty
