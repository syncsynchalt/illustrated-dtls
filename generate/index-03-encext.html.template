<div class="rec-outer">
<div class="record server">
<div class="rec-label">Server Encrypted Extensions Datagram</div>
<!--suppress CheckImageSize -->
<img class="illustration" src="images/key5.png" width="124" height="250"/>
<div class="rec-explanation">
    <p>
    The connection (including the handshake) is encrypted from
    this point on.  The encryption of handshake data is new in
    DTLS 1.3.
    <p>
    Any extensions that aren't needed for negotiating encryption
    are given in this encrypted record so they can be hidden from eavesdroppers and middleboxes.
</div>
%file ../captures/caps/03-encext-shs-prot
<span class="record-data">
    <span class="string">
        <span class="label">Unified Header Byte</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            An encrypted DTLS packet starts with the "Unified Header". This
            byte gives information on the structure and decryption epoch of
            the header and packet.
            <p>
            The bits in the value %x0 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Val</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><xtt>001</xtt></td><td>Fixed bits</td></tr>
            <tr><td></td><td><xtt>0</xtt></td><td>Connection ID field not present in header</td></tr>
            <tr><td></td><td><xtt>1</xtt></td><td>Sequence number in header is 2 bytes long</td></tr>
            <tr><td></td><td><xtt>1</xtt></td><td>Length field is present in header</td></tr>
            <tr><td>LSB</td><td><xtt>10</xtt></td><td>Encryption epoch 2 - handshake keys</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Number</span>
        <span class="bytes protected">
%next 2
%bytes
        </span>
        <span class="bytes unprotected">
00 00
        </span>
        <div class="explanation">
            <button class="hp-toggle"></button><br>
            The record number of the packet is encrypted, to prevent middleware
            from interpreting or interfering with the sequencing of packets.
            <br><br>
            This encryption is applied by encrypting a sample of each packet's
            payload with the "record number key", then XOR'ing certain bits
            and bytes in each packet with the resulting data.
            <br><br>
            An example of how to compute record number encryption:
            <codesample>
<pre><code>### "server record number key" from handshake keys calc step above
$ key=7173fac51194e775001d625ef69d7c9f
### sample is taken from 16 bytes of payload starting 5 bytes into the record
$ sample=ee9dcff3f8679a4859fe68377fb34ada
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p

79fa

### the above bytes are xor'd one-for-one into the bytes of the record number
</code></pre>
            </codesample>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            Each record is assumed to consume the remainder of the datagram unless this
            optional length is given. This allows implementations to send several TLS records
            in a single datagram (though this connection does not take advantage of this).
            <ul>
            <li><xtt>%0 %1</xtt> - Record length of %nn0 bytes
            </ul>
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 31
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the server handshake key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that protects the integrity of the
            encrypted data and the record header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the server
            handshake key and the server handshake IV that were
            generated during the "Server Handshake Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 0.  The process also
            takes as input the 5-byte record header, as authenticated
            data that must match for the decryption to
            succeed.
            <br/><br/>
            Because the <xtt>openssl</xtt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Server Handshake Keys Calc" step
$ key=004e03e64ab6cba6b542775ec230e20a
$ iv=6d9924be044ee97c624913f2
### from this record
$ recdata=2e0000002f
$ authtag=f67fe442e7d7d2b8a3d5fa59574ffd00
$ recordnum=0
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  08 00 00 12 00 01 00 00  00 00 00 12 00 10 00 0a  |................|
00000010  00 0c 00 0a 00 17 00 1d  00 18 00 19 01 00 16     |...............|
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/record-encext
    <span class="string decrypted">
        <span class="label">Handshake Header</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            Each handshake message starts with a type and a length.
            <ul>
            <li><xtt>%0</xtt> - handshake message type 0x08 (encrypted extensions)
            <li><xtt>%1 %2 %3</xtt> - %nnn1 bytes of handshake message data within
            </ul>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Handshake Reconstruction Data</span>
        <span class="bytes">
%next 8
%bytes
        </span>
        <div class="explanation">
            Because UDP does not guarantee delivery or ordering, and
            because UDP datagrams might be smaller than handshake records that need
            to be sent, values must be provided to support record re-construction
            in case of data loss, reordering, or fragmentation.
            <ul>
            <li><xtt>%0 %1</xtt> - handshake message sequence number %nn0
            <li><xtt>%2 %3 %4</xtt> - fragment offset of %nnn2 bytes
            <li><xtt>%5 %6 %7</xtt> - fragment length of %nnn5 bytes
            </ul>
            <p>
            In this case the entire handshake record fits within a single UDP datagram,
            indicated by offset of zero and length of the full handshake record length.
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Extensions Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            The server has provided a list of extensions to apply to the connection.
            <ul>
            <li><xtt>%0 %1</xtt> - the extensions will take %nn0 bytes of data
            </ul>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Extension - Supported Groups</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
	        The server replies with the elliptic curve algorithms
	        it supports. To make this extension more generic for
	        other cryptography types it calls these "supported
	        groups" instead of "supported curves".
            <ul>
            <li><xtt>%0 %1</xtt> - assigned value for extension "Supported Groups"
            <li><xtt>%2 %3</xtt> - %nn2 bytes of "supported group" extension data follows
            <li><xtt>%4 %5</xtt> - %nn4 bytes of data are in the curves list
            <li><xtt>%6 %7</xtt> - assigned value for curve "secp256r1"
            <li><xtt>%8 %9</xtt> - assigned value for curve "x25519"
            <li><xtt>%10 %11</xtt> - assigned value for curve "secp384r1"
            <li><xtt>%12 %13</xtt> - assigned value for curve "secp521r1"
            <li><xtt>%14 %15</xtt> - assigned value for group "ffdhe2048"
            </ul>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Record Type</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            Each encrypted DTLS 1.3 record has a final byte which indicates its actual record type.
            <ul>
            <li><xtt>%0</xtt> - type is 22 (handshake record)
            </ul>
        </div>
    </span>
</span>
</div>
</div>
%empty
