<div class="rec-outer">
<div class="calculation server">
<div class="rec-label">Server Key Exchange Generation</div>
<!--suppress CheckImageSize -->
<img class="illustration" src="images/key3.png" width="130" height="250"/>
<div class="rec-explanation">
    <p>The server creates its own private/public keypair
    for key exchange.  Key exchange is a technique
    where two parties can agree on the same number without
    an eavesdropper being able to tell what the number is.
    <p>
    An explanation of the key exchange can be found on my
    <a href="https://x25519.xargs.org/">X25519 site</a>,
    but doesn't need to be understood in depth for the rest
    of this page.
    <br/><br/>
    The private key is chosen by selecting an integer between
    0 and 2<sup>256</sup>-1.  The server does this by generating 32
    bytes (256 bits) of random data.  The
    <a href="files/server-ephemeral-private.key" download="server-ephemeral-private.key">private key</a>
    selected is:

    <pre class="ind2"><xtt class="longboi"
    >909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeaf</xtt></pre>

    The <a href="files/server-ephemeral-public.key" download="server-ephemeral-public.key">public key</a>
    is created from the private key as explained on the <a href="https://x25519.xargs.org/">X25519 site</a>.
    The public key calculated is:

    <pre class="ind2"><xtt class="longboi"
    >9fd7ad6dcff4298dd3f96d5b1b2af910a0535b1488d7f8fabb349a982880b615</xtt></pre>

    The public key calculation can be confirmed with command line tools:
    <codesample>
<pre><code>### requires openssl 1.1.0 or higher
$ openssl pkey -noout -text &lt; server-ephemeral-private.key

X25519 Private-Key:
priv:
    90:91:92:93:94:95:96:97:98:99:9a:9b:9c:9d:9e:
    9f:a0:a1:a2:a3:a4:a5:a6:a7:a8:a9:aa:ab:ac:ad:
    ae:af
pub:
    9f:d7:ad:6d:cf:f4:29:8d:d3:f9:6d:5b:1b:2a:f9:
    10:a0:53:5b:14:88:d7:f8:fa:bb:34:9a:98:28:80:
    b6:15
</code></pre>
    </codesample>
</div>
</div>
</div>

%file ../captures/caps/record-shello
<div class="rec-outer">
<div class="record server">
<div class="rec-label">Server Hello Datagram</div>
<div class="rec-explanation">
    The server says "Hello" back.  The server provides information including the following:
    <ul>
    <li>server random data (used later in the handshake)
    <li>a selected cipher suite
    <li>a public key for key exchange
    <li>the negotiated protocol version
    </ul>
</div>
<span class="record-data">
    <span class="string">
        <span class="label">DTLS Record Header</span>
        <span class="bytes">
%next 13
%bytes
        </span>
        <div class="explanation">
            Each DTLS record starts with a type, some sequence info, and a length.
            <ul>
            <li><xtt>%0</xtt> - TLS record type %d0 (Handshake)
            <li><xtt>%1 %2</xtt> - Protocol version (DTLS 1.2, see below)
            <li><xtt>%3 %4</xtt> - key epoch (incremented each time the encryption keys are updated)
            <li><xtt>%5 %6 %7 %8 %9 %10</xtt> - DTLS record sequence number %nnnnnn5
            <li><xtt>%11 %12</xtt> - length of following data in this record (%nn11 bytes)
            </ul>
            <p>
            DTLS versions are encoded by breaking the protocol version
            into parts and then putting each part into a byte with the ones-complement value
            (thus "1.3" becomes {1,3} which becomes the bytes <xtt>0xFE 0xFC</xtt>).
            This complement technique keeps DTLS versions distinct from TLS versions.
            <p>
            Because middleboxes have been created and deployed
            that do not allow protocol versions that
            they do not recognize, all DTLS 1.3 sessions
            indicate version DTLS 1.2 (<xtt>0xFE 0xFD</xtt>) in unencrypted records.
        </div>
    </span>

    <span class="string">
        <span class="label">TLS Handshake Header</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            Each TLS handshake record starts with a type and a length.
            <ul>
            <li><xtt>%0</xtt> - handshake record type %d0 (ServerHello)
            <li><xtt>%1 %2 %3</xtt> - %nnn1 bytes of server hello data is in this handshake record.
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Handshake Reconstruction Data</span>
        <span class="bytes">
%next 8
%bytes
        </span>
        <div class="explanation">
            Because UDP does not guarantee delivery or ordering, and
            because UDP datagrams might be smaller than handshake records that need
            to be sent, values must be provided to support record re-construction
            in case of data loss, reordering, or fragmentation.
            <ul>
            <li><xtt>%0 %1</xtt> - handshake message sequence number %nn0
            <li><xtt>%2 %3 %4</xtt> - fragment offset of %nnn2 bytes
            <li><xtt>%5 %6 %7</xtt> - fragment length of %nnn5 bytes
            </ul>
            <p>
            In this case the entire handshake record fits within a single UDP datagram,
            indicated by offset of zero and length of the full handshake record length.
        </div>
    </span>

    <span class="string">
        <span class="label">Server Version (Legacy)</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            DTLS versions are encoded by breaking the protocol version
            into parts and then putting each part into a byte with the ones-complement value
            (thus "1.3" becomes {1,3} which becomes the bytes <xtt>0xFE 0xFC</xtt>).
            This complement technique keeps DTLS versions distinct from TLS versions.
            <p>
            Because middleboxes have been created and deployed
            that do not allow protocol versions that
            they do not recognize, all DTLS 1.3 sessions
            indicate version DTLS 1.2 (<xtt>0xFE 0xFD</xtt>) in this field.
            Therefore this field is no longer used in version negotiation,
            which uses the "Supported Versions" extension below instead.
        </div>
    </span>

    <span class="string">
        <span class="label">Server Random</span>
        <span class="bytes">
%next 32
%bytes
        </span>
        <div class="explanation">
            The server provides 32 bytes of random data.  This data will be used later in the session.
            In this example we've made the random data a predictable string.
        </div>
    </span>

    <span class="string">
        <span class="label">Legacy Session ID</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            This is a legacy field and is not used in DTLS 1.3.
            <ul>
            <li><xtt>%0</xtt> - %n0 bytes of session ID follow
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Cipher Suite</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            The server has selected cipher suite 0x1301
            (TLS_AES_128_GCM_SHA256) from the list of options given by the client.
        </div>
    </span>

    <span class="string">
        <span class="label">Compression Method</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            The server has selected compression method
            0x00 ("Null", which performs no compression)
            from the list of options given by the client.
        </div>
    </span>

    <span class="string">
        <span class="label">Extensions Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            The server has returned a list of extensions
            to the client.  Because the server is
            forbidden from replying with an extension
            that the client did not send in its hello
            message, the server knows that the client
            will understand and support all extensions listed.
            <ul>
            <li><xtt>%0 %1</xtt> - the extensions will take %nn0 bytes of data
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Extension - Key Share</span>
        <span class="bytes">
%next 40
%bytes
        </span>
        <div class="explanation">
            The server sends a public key using the algorithm
            of the public key sent by the client.  Once this is sent
            encryption keys can be calculated and the rest of the
            handshake will be encrypted,
            unlike previous protocol versions where the
            handshake was sent in the clear.
            <ul>
                <li><xtt>00 33</xtt> - assigned value for extension "Key Share"
                <li><xtt>%2 %3</xtt> - %nn2 bytes of "Key Share" extension data follows
                <li><xtt>00 1d</xtt> - assigned value for x25519 (key exchange via curve25519)
                <li><xtt>%6 %7</xtt> - %nn6 bytes of public key follows
                <li><xtt>%8 %9 ... %-2 %-1</xtt> - public key from the step "Server Key Exchange Generation"
            </ul>
        </div>
    </span>

    <span class="string">
        <span class="label">Extension - Supported Versions</span>
        <span class="bytes">
%next 6
%bytes
        </span>
        <div class="explanation">
            The server indicates the negotiated DTLS version of 1.3.
            <ul>
                <li><xtt>00 2b</xtt> - assigned value for extension "Supported Versions"
                <li><xtt>%2 %3</xtt> - %nn2 bytes of "Supported Versions" extension data follows
                <li><xtt>%4 %5</xtt> - assigned value for DTLS 1.3
            </ul>
        </div>
    </span>
</span>
</div>
</div>
%empty
