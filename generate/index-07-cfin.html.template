<div class="rec-outer">
<div class="record client">
<div class="rec-label">Client Handshake Finished</div>
<div class="rec-explanation">
    To verify that the handshake was successful and not tampered
    with, the client calculates verification data that the
    server will agree on, and encrypts it with the client
    handshake key.  The verification data is built from a hash
    of all handshake messages.
</div>
%file ../captures/caps/07-fin-chs-prot
<span class="record-data">
    <span class="string">
        <span class="label">Unified Header Byte</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            An encrypted DTLS packet starts with the "Unified Header". This
            byte gives information on the structure and decryption epoch of
            the header and packet.
            <p>
            The bits in the value %x0 have the following meaning:
            <table class="bits">
            <thead><tr>
              <th></th>
              <th>Val</th>
              <th>Meaning</th>
            </tr></thead>
            <tr><td>MSB</td><td><xtt>001</xtt></td><td>Fixed bits</td></tr>
            <tr><td></td><td><xtt>0</xtt></td><td>Connection ID is not present in header</td></tr>
            <tr><td></td><td><xtt>1</xtt></td><td>Sequence number in header is 2 bytes long</td></tr>
            <tr><td></td><td><xtt>1</xtt></td><td>2-byte length is present in header</td></tr>
            <tr><td>LSB</td><td><xtt>10</xtt></td><td>Encryption epoch 2 - handshake keys</td></tr>
            </table>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Number</span>
        <span class="bytes protected">
%next 2
%bytes
        </span>
        <span class="bytes unprotected">
00 00
        </span>
        <div class="explanation">
            <button class="hp-toggle">Disable record number encryption</button><br>
            The record number of the packet is encrypted, to prevent middleware
            from interpreting or interfering with the sequencing of packets.
            <br><br>
            This encryption is applied by encrypting a sample of each packet's
            payload with the "record number key", then XOR'ing certain bits
            and bytes in each packet with the resulting data.
            <br><br>
            An example of how to compute record number encryption:
            <codesample>
<pre><code>### "client record number key" from handshake keys calc step above
$ key=beed6218676635c2cb46a45694144fec
### sample is taken from 16 bytes of payload starting 5 bytes into the record
$ sample=8a2cd52d5000f8786afb47cdf0b8f2b8
$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p

c248

### the above bytes are xor'd one-for-one into the bytes of the record number
</code></pre>
            </codesample>
        </div>
    </span>

    <span class="string">
        <span class="label">Record Length</span>
        <span class="bytes">
%next 2
%bytes
        </span>
        <div class="explanation">
            Each record is assumed to consume the remainder of the datagram unless this
            optional length is given. This allows implementations to send several TLS records
            in a single datagram (though this connection does not take advantage of this).
            <ul>
            <li><xtt>%0 %1</xtt> - Record length of %nn0 bytes
            </ul>
        </div>
    </span>

    <span class="string encrypted">
        <span class="label">Encrypted Data</span>
        <span class="bytes">
%next 45
%bytes
        </span>
        <div class="explanation">
            This data is encrypted with the client handshake key.
        </div>
    </span>
    <span class="string">
        <span class="label">Auth Tag</span>
        <span class="bytes">
%next 16
%bytes
        </span>
        <div class="explanation">
            This is the AEAD authentication tag
            that protects the integrity of the
            encrypted data and the record header.
        </div>
    </span>
%empty

    <div class="decryption">
        <div class="label">Decryption</div>
        <div class="explanation">
            This data is encrypted using the client
            handshake key and the client handshake IV that were
            generated during the "Client Handshake Keys
            Calc" step.  The IV will be modified
            by XOR'ing it by the count of records that
            have already been encrypted with this key,
            which in this case is 0.  The process also
            takes as input the 5-byte record header, as authenticated
            data that must match for the decryption to
            succeed.
            <br/><br/>
            Because the <xtt>openssl</xtt> command line
            tool does not yet support AEAD ciphers,
            I've written command line tools to both
            <a href="files/aes_128_gcm_decrypt.c" download="aes_128_gcm_decrypt.c">decrypt</a>
            and <a href="files/aes_128_gcm_encrypt.c" download="aes_128_gcm_encrypt.c">encrypt</a>
            this data.
            <codesample>
<pre><code>### from the "Client Handshake Keys Calc" step
$ key=6caa2633d5e48f10051e69dc45549c97
$ iv=106dc6e393b7a9ea8ef29dd7
### from this record
$ recdata=2e0000003d
$ authtag=07a2c5f75f7cffb7465bc01d23d8511f
$ recordnum=0
### may need to add -I and -L flags for include and lib dirs
$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto
$ cat /tmp/msg1 \
  | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag \
  | hexdump -C

00000000  14 00 00 20 00 01 00 00  00 00 00 20 6f 28 01 39
00000010  6b 0e 90 eb b4 a3 ba 38  4a bc fc 6b 24 20 1a bd
00000020  81 b3 16 b2 39 1d a3 78  37 7f ac f5 16
</code></pre>
            </codesample>
        </div>
    </div>

%file ../captures/caps/record-cfin
    <span class="string decrypted">
        <span class="label">Handshake Header</span>
        <span class="bytes">
%next 4
%bytes
        </span>
        <div class="explanation">
            Each handshake message starts with a type and a length.
            <ul>
            <li><xtt>%0</xtt> - handshake message type 0x14 (finished)
            <li><xtt>%1 %2 %3</xtt> - %nnn1 bytes of handshake message data within
            </ul>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Handshake Reconstruction Data</span>
        <span class="bytes">
%next 8
%bytes
        </span>
        <div class="explanation">
            Because UDP does not guarantee delivery or ordering, and
            because UDP datagrams might be smaller than handshake records that need
            to be sent, values must be provided to support record re-construction
            in case of data loss, reordering, or fragmentation.
            <ul>
            <li><xtt>%0 %1</xtt> - handshake message sequence number %nn0
            <li><xtt>%2 %3 %4</xtt> - fragment offset of %nnn2 bytes
            <li><xtt>%5 %6 %7</xtt> - fragment length of %nnn5 bytes
            </ul>
            <p>
            In this case the entire handshake record fits within a single UDP datagram,
            indicated by offset of zero and length of the full handshake record length.
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Verify Data</span>
        <span class="bytes">
%next 32
%bytes
        </span>
        <div class="explanation">
            The verify_data is built using the
            client_secret from
            the "Client Handshake Keys Calc" step and
            a SHA256 hash of every handshake record
            before this point (Client Hello to Server Handshake Finished).

            <processblock class="notrunc">
<pre>finished_key = HKDF-Expand-Label(key: client_secret, label: "finished", ctx: "", len: 32)
finished_hash = SHA256(Client Hello ... Server Handshake Finished)
verify_data = HMAC-SHA256(key: finished_key, msg: finished_hash)
</pre>
            </processblock>

            We can use <a href="files/hkdf-dtls.sh" download="hkdf-dtls">the HKDF
            tool</a> to reproduce this on the command line.
            <codesample>
<pre><code>### find the hash of the conversation to this point, excluding
### cleartext record headers, DTLS-only record headers,
### or 1-byte decrypted record trailers
$ fin_hash=$((
    cat record-chello  | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/s';
    cat record-shello  | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/s';
    cat record-encext  | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';
    cat record-cert    | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';
    cat record-cverify | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';
    cat record-sfin    | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';
  ) | openssl sha256)
$ cht_secret=33e472fb8d821b0193314626bebee307ccbd1aeb3d3a17ba468888ffc5246da1
$ fin_key=$(./hkdf-dtls expandlabel $cht_secret "finished" "" 32)
$ echo $fin_hash | xxd -r -p \
    | openssl dgst -sha256 -mac HMAC -macopt hexkey:$fin_key

6f2801396b0e90ebb4a3ba384abcfc6b24201abd81b316b2391da378377facf5
</code></pre>
            </codesample>
        </div>
    </span>

    <span class="string decrypted">
        <span class="label">Record Type</span>
        <span class="bytes">
%next 1
%bytes
        </span>
        <div class="explanation">
            Each encrypted DTLS 1.3 record has a final byte which indicates its actual record type.
            <ul>
            <li><xtt>%0</xtt> - type is 22 (handshake record)
            </ul>
        </div>
    </span>
</span>
</div>
</div>
%empty
